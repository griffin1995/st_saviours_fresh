'use client';

import {
  Bars3Icon,
  XMarkIcon,
  ChevronDownIcon,
  HeartIcon
} from '@heroicons/react/24/solid';
import { m, AnimatePresence } from 'framer-motion';
import Link from 'next/link';
import { useEffect, useState } from 'react';

// Navigation menu structure
const navigationMenu = [
  {
    name: 'About',
    href: '/about-us',
    dropdown: [
      { name: 'About Us', href: '/about-us' },
      { name: 'Find Us', href: '/find-us' },
      { name: 'Our History', href: '/about-us#history' },
      { name: 'Parish Priest', href: '/about-us#leadership' },
    ],
  },
  {
    name: 'Prayer & The Sacraments',
    href: '/mass',
    dropdown: [
      { name: 'Mass Times', href: '/mass' },
      { name: 'The Sacraments', href: '/the-sacraments' },
      { name: 'Baptism', href: '/the-sacraments/baptism' },
      { name: 'Confirmation', href: '/the-sacraments/confirmation' },
      { name: 'The Eucharist', href: '/the-sacraments/the-eucharist' },
      { name: 'Confession', href: '/the-sacraments/confession' },
      { name: 'Marriage', href: '/the-sacraments/matrimony' },
      { name: 'Holy Orders', href: '/the-sacraments/holy-orders' },
      { name: 'Anointing of the Sick', href: '/the-sacraments/anointing-of-the-sick' },
    ],
  },
  {
    name: 'Community',
    href: '/news',
    dropdown: [
      { name: 'Parish News', href: '/news' },
      { name: 'Community News', href: '/community-news' },
      { name: 'Parish Groups', href: '/parish-groups' },
      { name: 'Weekly Newsletter', href: '/weekly-newsletter' },
      { name: "St Saviour's Talks", href: '/st-saviours-talks' },
      { name: 'Gallery', href: '/gallery' },
      { name: 'Streaming', href: '/streaming' },
      { name: 'Podcasts', href: '/podcasts' },
    ],
  },
  {
    name: 'The Learning Hub',
    href: '/knowledge-hub',
    dropdown: [
      { name: 'Theology Articles', href: '/knowledge-hub' },
      { name: 'Catholic Mystics', href: '/knowledge-hub#mystics' },
      { name: 'Saints & Theologians', href: '/knowledge-hub#theologians' },
      { name: 'Faith Formation', href: '/knowledge-hub#formation' },
    ],
  },
  {
    name: "St Saviour's School",
    href: '/st-saviours-primary-school',
    dropdown: [
      { name: 'About Our School', href: '/st-saviours-primary-school' },
      { name: 'Admissions', href: '/st-saviours-primary-school#admissions' },
      { name: 'School Tours', href: '/st-saviours-primary-school#visit' },
      { name: 'School Values', href: '/st-saviours-primary-school#values' },
    ],
  },
  {
    name: 'Contact',
    href: '/contact-us',
    dropdown: [
      { name: 'Contact Us', href: '/contact-us' },
      { name: 'Venue Hire', href: '/venue-hire' },
      { name: 'Emergency Contact', href: '/contact-us#emergency' },
      { name: 'Safeguarding', href: '/safeguarding' },
    ],
  },
];

// Hardcoded church information
const CHURCH_NAME = "St Saviour's";
const CHURCH_LOCATION = 'Lewisham';

interface NavigationProps {
  className?: string;
}

export default function Navigation({ className = '' }: NavigationProps) {
  // State management
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [hoverTimeout, setHoverTimeout] = useState<NodeJS.Timeout | null>(null);

  // Track scroll position
  useEffect(() => {
    const handleScroll = () => {
      setScrollPosition(window.scrollY);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Handle escape key for closing dropdowns
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent): void => {
      if (e.key === 'Escape') {
        setActiveDropdown(null);
        setMobileMenuOpen(false);
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, []);

  // Handle outside clicks
  useEffect(() => {
    const handleOutsideClick = (e: MouseEvent): void => {
      const target = e.target as Element;
      if (!target.closest('[data-navigation]') && !target.closest('.dropdown-area')) {
        setActiveDropdown(null);
      }
    };

    if (activeDropdown) {
      document.addEventListener('mousedown', handleOutsideClick);
      return () => document.removeEventListener('mousedown', handleOutsideClick);
    }
    return undefined;
  }, [activeDropdown]);

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (hoverTimeout) {
        clearTimeout(hoverTimeout);
      }
    };
  }, [hoverTimeout]);

  // Hover handlers for desktop dropdowns
  const handleMouseEnterNav = (itemName: string): void => {
    if (hoverTimeout) {
      clearTimeout(hoverTimeout);
      setHoverTimeout(null);
    }
    setActiveDropdown(itemName);
  };

  const handleMouseLeaveNavArea = (): void => {
    const timeout = setTimeout(() => {
      setActiveDropdown(null);
    }, 150);
    setHoverTimeout(timeout);
  };

  const handleMouseEnterDropdown = (): void => {
    if (hoverTimeout) {
      clearTimeout(hoverTimeout);
      setHoverTimeout(null);
    }
  };

  // Mobile menu handlers
  const handleDropdownToggle = (itemName: string): void => {
    setActiveDropdown(activeDropdown === itemName ? null : itemName);
  };

  const handleMobileMenuToggle = (): void => {
    setMobileMenuOpen(!mobileMenuOpen);
    if (!mobileMenuOpen) {
      setActiveDropdown(null);
    }
  };

  const handleLinkClick = (): void => {
    setMobileMenuOpen(false);
    setActiveDropdown(null);
  };

  // Animation variants
  const navVariants = {
    hidden: { y: -100, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.6,
        ease: 'easeOut'
      }
    }
  };

  const dropdownVariants = {
    hidden: {
      opacity: 0,
      y: -20,
      scale: 0.95
    },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        duration: 0.3,
        ease: 'easeOut'
      }
    },
    exit: {
      opacity: 0,
      y: -20,
      scale: 0.95,
      transition: {
        duration: 0.2
      }
    }
  };

  const mobileMenuVariants = {
    hidden: {
      opacity: 0,
      height: 0,
      transition: {
        duration: 0.3
      }
    },
    visible: {
      opacity: 1,
      height: 'auto',
      transition: {
        duration: 0.4,
        ease: 'easeOut'
      }
    }
  };

  const isScrolled = scrollPosition > 20;

  return (
    <>
      <m.nav
        variants={navVariants}
        initial="hidden"
        animate="visible"
        data-navigation
        className={`
          fixed top-0 left-0 right-0 w-full z-[9999] transition-all duration-500
          ${isScrolled || activeDropdown !== null || mobileMenuOpen
            ? 'bg-slate-900/95 backdrop-blur-xl shadow-xl'
            : 'bg-transparent'
          }
          ${className}
        `}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            {/* Logo Section */}
            <Link
              href="/"
              className="flex items-center space-x-3 group"
              onClick={handleLinkClick}
            >
              <m.div
                className="relative w-16 h-16 flex-shrink-0 bg-white/10 rounded-full flex items-center justify-center"
                whileHover={{ scale: 1.05 }}
                transition={{ duration: 0.2 }}
              >
                {/* Placeholder for logo - replace with actual logo when available */}
                <span className="text-2xl font-bold text-white">SS</span>
              </m.div>
              <div className="hidden sm:flex flex-col">
                <span className="text-lg font-semibold text-white transition-colors duration-200 group-hover:text-gold-300">
                  {CHURCH_NAME}
                </span>
                <span className="text-sm text-white/90 -mt-1 transition-colors duration-200 group-hover:text-gold-200">
                  Catholic Church, {CHURCH_LOCATION}
                </span>
              </div>
            </Link>

            {/* Desktop Navigation */}
            <div
              className="hidden lg:flex items-center space-x-1"
              onMouseLeave={handleMouseLeaveNavArea}
            >
              {navigationMenu.map((item) => (
                <div
                  key={item.name}
                  className="relative"
                  onMouseEnter={() => handleMouseEnterNav(item.name)}
                >
                  <m.button
                    className={`
                      flex items-center px-4 py-2 text-base font-medium rounded-lg transition-all duration-200
                      ${activeDropdown === item.name
                        ? 'bg-white/20 text-white shadow-lg'
                        : 'text-white hover:text-white hover:bg-white/10'
                      }
                    `}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    {item.name}
                    <m.div
                      animate={{
                        rotate: activeDropdown === item.name ? 180 : 0
                      }}
                      transition={{ duration: 0.2 }}
                    >
                      <ChevronDownIcon className="ml-1 h-4 w-4" />
                    </m.div>
                  </m.button>
                </div>
              ))}

              {/* Donate Button */}
              <div className="flex items-center space-x-3 ml-6">
                <Link href="/donate" onClick={handleLinkClick}>
                  <m.div
                    className="inline-flex items-center gap-2 px-4 py-2 bg-white text-slate-900 hover:bg-gray-100 font-semibold rounded-lg transition-colors duration-200 shadow-lg"
                    whileHover={{ scale: 1.05, y: -1 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <HeartIcon className="h-4 w-4" />
                    <span className="hidden xl:inline">Donate</span>
                  </m.div>
                </Link>
              </div>
            </div>

            {/* Mobile Menu Button */}
            <m.button
              onClick={handleMobileMenuToggle}
              className="lg:hidden p-2 rounded-lg text-white hover:bg-white/10"
              whileTap={{ scale: 0.95 }}
              aria-label="Toggle mobile menu"
            >
              <AnimatePresence mode="wait">
                {mobileMenuOpen ? (
                  <m.div
                    key="close"
                    initial={{ rotate: -90, opacity: 0 }}
                    animate={{ rotate: 0, opacity: 1 }}
                    exit={{ rotate: 90, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <XMarkIcon className="h-6 w-6" />
                  </m.div>
                ) : (
                  <m.div
                    key="menu"
                    initial={{ rotate: 90, opacity: 0 }}
                    animate={{ rotate: 0, opacity: 1 }}
                    exit={{ rotate: -90, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <Bars3Icon className="h-6 w-6" />
                  </m.div>
                )}
              </AnimatePresence>
            </m.button>
          </div>
        </div>

        {/* Mobile Menu */}
        <AnimatePresence>
          {mobileMenuOpen && (
            <m.div
              variants={mobileMenuVariants}
              initial="hidden"
              animate="visible"
              exit="hidden"
              className="lg:hidden bg-slate-900/95 backdrop-blur-xl border-t border-slate-700/50 shadow-lg overflow-hidden"
            >
              <div className="px-4 py-6 space-y-2">
                {navigationMenu.map((item) => (
                  <div key={item.name}>
                    <m.button
                      onClick={() => handleDropdownToggle(item.name)}
                      className="w-full flex items-center justify-between px-4 py-3 text-white hover:bg-white/10 rounded-lg font-medium text-base transition-colors duration-200"
                      whileTap={{ scale: 0.98 }}
                    >
                      {item.name}
                      <m.div
                        animate={{
                          rotate: activeDropdown === item.name ? 180 : 0
                        }}
                        transition={{ duration: 0.2 }}
                      >
                        <ChevronDownIcon className="h-4 w-4" />
                      </m.div>
                    </m.button>

                    <AnimatePresence>
                      {activeDropdown === item.name && (
                        <m.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          transition={{ duration: 0.3 }}
                          className="ml-4 mt-2 space-y-1 overflow-hidden"
                        >
                          {item.dropdown.map((subItem, index) => (
                            <m.div
                              key={subItem.name}
                              initial={{ opacity: 0, x: -20 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{
                                duration: 0.3,
                                delay: index * 0.05
                              }}
                            >
                              <Link
                                href={subItem.href}
                                className="block px-4 py-2 text-white/90 hover:bg-white/10 rounded-lg transition-colors duration-200"
                                onClick={handleLinkClick}
                              >
                                {subItem.name}
                              </Link>
                            </m.div>
                          ))}
                        </m.div>
                      )}
                    </AnimatePresence>
                  </div>
                ))}

                {/* Mobile Donate Button */}
                <div className="pt-6 mt-6 border-t border-slate-700/50 space-y-3">
                  <Link
                    href="/donate"
                    className="flex items-center justify-center gap-2 w-full px-4 py-3 bg-white text-slate-900 hover:bg-gray-100 font-semibold rounded-lg transition-colors duration-200"
                    onClick={handleLinkClick}
                  >
                    <HeartIcon className="h-5 w-5" />
                    Donate
                  </Link>
                </div>
              </div>
            </m.div>
          )}
        </AnimatePresence>
      </m.nav>

      {/* Hover Bridge - Invisible area to connect nav and dropdown */}
      <AnimatePresence>
        {activeDropdown && (
          <div
            className="fixed left-0 right-0 h-4 z-[9997] dropdown-area"
            style={{ top: '76px' }}
            onMouseEnter={handleMouseEnterDropdown}
            onMouseLeave={handleMouseLeaveNavArea}
          />
        )}
      </AnimatePresence>

      {/* Desktop Dropdown Menu */}
      <AnimatePresence>
        {activeDropdown && (
          <m.div
            variants={dropdownVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="fixed left-0 right-0 bg-slate-900/95 backdrop-blur-xl shadow-xl border-b border-slate-700/50 z-[9998] dropdown-area"
            style={{ top: '80px' }}
            data-navigation
            onMouseEnter={handleMouseEnterDropdown}
            onMouseLeave={handleMouseLeaveNavArea}
          >
            <div className="max-w-7xl mx-auto px-6 py-8">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {navigationMenu
                  .find(item => item.name === activeDropdown)
                  ?.dropdown.map((subItem, index) => (
                    <m.div
                      key={subItem.name}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{
                        duration: 0.3,
                        delay: index * 0.05
                      }}
                    >
                      <Link
                        href={subItem.href}
                        className="group relative block rounded-xl p-6 transition-all duration-300 hover:bg-white/10 hover:shadow-lg border border-transparent hover:border-white/20"
                        onClick={handleLinkClick}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex-1">
                            <h3 className="text-lg font-semibold text-white group-hover:text-gold-300 transition-colors duration-300 relative inline-block">
                              {subItem.name}
                              <span className="absolute bottom-0 left-0 h-0.5 bg-gold-400 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left w-full"></span>
                            </h3>
                            <p className="text-sm text-white/70 mt-1 group-hover:text-white/90 transition-colors duration-300">
                              Learn more about {subItem.name.toLowerCase()}
                            </p>
                          </div>
                          <m.div
                            className="opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                            animate={{ x: 0 }}
                            whileHover={{ x: 4 }}
                          >
                            <ChevronDownIcon className="h-5 w-5 text-gold-300 -rotate-90" />
                          </m.div>
                        </div>
                      </Link>
                    </m.div>
                  ))}
              </div>

              {/* Call to Action */}
              <m.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.4, delay: 0.2 }}
                className="mt-8 pt-6 border-t border-slate-700/50"
              >
                <div className="text-center">
                  <h3 className="text-lg font-semibold text-white mb-2">Need Help?</h3>
                  <p className="text-white/70 mb-4">
                    Our parish team is here to support you
                  </p>
                  <Link
                    href="/contact-us"
                    className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-gold-600 to-gold-700 text-white font-semibold rounded-lg shadow-lg hover:from-gold-700 hover:to-gold-800 focus:outline-none focus:ring-2 focus:ring-gold-500 focus:ring-offset-2 transition-all duration-200"
                    onClick={handleLinkClick}
                  >
                    Contact Us
                    <ChevronDownIcon className="h-4 w-4 -rotate-90" />
                  </Link>
                </div>
              </m.div>
            </div>
          </m.div>
        )}
      </AnimatePresence>

      {/* Backdrop Overlay */}
      <AnimatePresence>
        {(activeDropdown !== null || mobileMenuOpen) && (
          <m.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="fixed inset-0 bg-black/20 backdrop-blur-sm z-[9997]"
            style={{
              top: activeDropdown !== null ? '320px' : '80px'
            }}
            onClick={() => {
              setActiveDropdown(null);
              setMobileMenuOpen(false);
            }}
          />
        )}
      </AnimatePresence>
    </>
  );
}
